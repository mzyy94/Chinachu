/*!
 *  Chinachu Common Module (node-chinachu-common)
 *
 *  Copyright (c) 2012 Yuki KAN and Chinachu Project Contributors
 *  http://chinachu.akkar.in/
**/
/*jslint node:true, nomen: true, plusplus: true, regexp: true */
'use strict';

var fs         = require('fs');
var crypto     = require('crypto');
var dateFormat = require('dateformat');

exports.jsonWatcher = function (filepath, callback, option) {
	if (typeof option === 'undefined') { option = {}; }
	
	option.wait = option.wait || 1000;
	
	if (!fs.existsSync(filepath)) {
		if (option.create) {
			fs.writeFileSync(filepath, JSON.stringify(option.create));
		} else {
			callback('FATAL: `' + filepath + '` is not exists.', null, null);
			return;
		}
	}
	
	function read() {
		try {
			if (typeof require.cache[filepath] !== 'undefined') {
				delete require.cache[filepath];
			}
			
			var data = require(filepath);
			callback(null, data, 'READ: `' + filepath + '` is updated.');
		} catch (e) {
			callback('WARN: `' + filepath + '` is invalid. (' + e + ')', null, null);
		}
	}
	
	if (option.now) { read(); }
	
	var timer;
	function onUpdated() {
		clearTimeout(timer);
		timer = setTimeout(read, option.wait);
	}
	fs.watch(filepath, onUpdated);
};

exports.getProgramById = function (id, array) {
	if (!array || array.length === 0) {
		return null;
	}
	
	if (array[0].programs) {
		array = (function () {
			var programs = [];
			
			array.forEach(function (ch) {
				programs = programs.concat(ch.programs);
			});
			
			return programs;
		}());
	}
	
	return (function () {
		var x = null;
		
		array.forEach(function (a) {
			if (a.id === id) { x = a; }
		});
		
		return x;
	}());
};

exports.existsTuner = function (tuners, type, callback) {
	
	process.nextTick(function () {
		callback(exports.existsTunerSync(tuners, type));
	});
};

exports.existsTunerSync = function (tuners, type) {
	
	var j, tuner, isExists = false;
	
	for (j = 0; tuners.length > j; j++) {
		tuner = tuners[j];
		tuner.n = j;
		
		if (tuner.types.indexOf(type) !== -1) {
			isExists = true;
			break;
		}
	}
	
	return isExists;
};

exports.getFreeTunerSync = function (tuners, type) {
	
	var j, tuner, freeTuner = null;
	
	for (j = 0; tuners.length > j; j++) {
		tuner = tuners[j];
		tuner.n = j;
		
		if ((tuner.types.indexOf(type) !== -1) && (fs.existsSync('./data/tuner.' + j + '.lock') === false)) {
			freeTuner = tuner;
			break;
		}
	}
	
	return freeTuner;
};

exports.lockTunerSync = function (tuner) {
	try {
		return fs.writeFileSync('./data/tuner.' + tuner.n + '.lock', '', { flag: 'wx' });
	} catch (e) {
		throw e;
	}
};

exports.unlockTunerSync = function (tuner) {
	return fs.unlinkSync('./data/tuner.' + tuner.n + '.lock');
};

var Countdown = function (count, callback) {
	this.c = count;
	this.f = callback;
};

Countdown.prototype = {
	tick: function () {
		
		--this.c;
		
		if (this.c === 0) {
			this.f();
		}
		
		return this;
	}
};

exports.createCountdown = function (a, b) {
	return new Countdown(a, b);
};

exports.createTimeout = function (a, b) {
	return function () {
		return setTimeout(a, b);
	};
};

exports.formatRecordedName = function (program, name) {
	name = name.replace(/<([^>]+)>/g, function (z, a) {
		
		// date:
		if (a.match(/^date:.+$/) !== null) { return dateFormat(new Date(program.start), a.match(/:(.+)$/)[1]); }
		
		// id
		if (a.match(/^id$/) !== null) { return program.id; }
		
		// type
		if (a.match(/^type$/) !== null) { return program.channel.type; }
		
		// channel
		if (a.match(/^channel$/) !== null) { return program.channel.channel; }
		
		// channel-id
		if (a.match(/^channel-id$/) !== null) { return program.channel.id; }
		
		// channel-sid
		if (a.match(/^channel-sid$/) !== null) { return program.channel.sid; }
		
		// channel-name
		if (a.match(/^channel-name$/) !== null) { return exports.stripFilename(program.channel.name); }
		
		// tuner
		if (a.match(/^tuner$/) !== null) { return program.tuner.name; }
		
		// title
		if (a.match(/^title$/) !== null) { return exports.stripFilename(program.title); }
		
		// fulltitle
		if (a.match(/^fulltitle$/) !== null) { return exports.stripFilename(program.fullTitle || ''); }
		
		// subtitle
		if (a.match(/^subtitle$/) !== null) { return exports.stripFilename(program.subTitle || ''); }
		
		// episode
		if (a.match(/^episode$/) !== null) { return program.episode || 'n'; }
		
		// category
		if (a.match(/^category$/) !== null) { return program.category; }
	});
	
	return name;
};

// strip
exports.stripFilename = function (a) {
	
	a = a.replace(/\//g, '／').replace(/\\/g, '＼').replace(/:/g, '：').replace(/\*/g, '＊').replace(/\?/g, '？');
	a = a.replace(/"/g, '”').replace(/</g, '＜').replace(/>/g, '＞').replace(/\|/g, '｜').replace(/≫/g, '＞＞');
	
	return a;
};